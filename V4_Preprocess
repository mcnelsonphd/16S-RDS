#!/bin/sh

# V4_Preprocess
# 
#
# Created by Michael C. Nelson on 2013-06-01.
# Last revised: 2015-11-17
# Revision #: 5.3
# Copyright 2014 Michael C. Nelson and the University of Connecticut.
# 
# This script is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 
#
# Goal:
# User calls the script in the directory containing the Undetermined read and index files.
# The script will then series of steps to correctly merge the paired reads, remove phiX contamination, and filter reads on length.
# After script completion, the final read and index files will be in the primary directory while intermediate output files will be in the intermediates sub-directory.
# Checkpointing is performed to allow the script to be re-run from the last safely completed step in case of script failure.
# File tracing is accomplished by calculating md5 checksum values for all input and final output files (see note).

## NOTE:
# There is a difference in the compression used between MiSeqReporter and gzip as implemented on OSX (and posisbly linux although not tested).
# This means that the initial md5 checksum values calculated from the original Undetermined files from the MiSeq will not be equal after processing
# them with this script, even though the original files are not directly modified asides from uncompressing and then re-compressing with gzip.
# My only current solution to enable accurate tracking it to calculate the md5 values of the original compressed files, as well as the uncompressed
# versions. The uncompressed md5 values should always be identical regardless of the compression method.
#

# Hardcoded path to the phiX reference index for use by bowtie. Change this path as needed.
PHIX=/Volumes/DATA_RAID/Reference_Files/phiX/phix

# Create a subroutine for compression of fastq files in parallel or not
compress(){
    if [ -z "$1" ]; then
        EXE=*.fastq
    else
        EXE=$1
    fi
    if $SMP; then
        parallel gzip ::: $EXE
    else
        gzip $EXE
    fi
}

# Useage: V4_Preprocess
clear
echo ''
echo ''
# Initialize timestamp variables
DATE=`date +%Y-%m-%d`
TIME=`date +%H:%M:%S`
TM=`date +%Y%m%d-%H%M%S`
LOG=V4_Pre-Process_Log_$TM.txt
# Create log file
echo "Executing V4_Preprocess.sh on $DATE at $TIME " | tee $LOG
# Find the systerm serial number for use as grep pattern
PATTERN=`gzcat Undetermined_S0_L001_R1_001.fastq.gz | head -n 1 | tr -d '@' | cut -d: -f1,1`

# Check to see if script has successfully executed already
if [ -f Pre-Processing.complete ]; then
    echo '' | tee -a $LOG
    echo 'The script appears to have already executed correctly.' | tee -a $LOG
    echo 'If you wish to re-run the preprocessing again please delete the Pre-Processing.complete file.' | tee -a $LOG
    echo '' | tee -a $LOG
    exit 0
fi

# Check to see if GNU parallel is installed.
if hash parallel 2>/dev/null; then
    SMP=TRUE
    echo 'Running in multi-process mode' | tee -a $LOG
else
    echo 'Running in single-process mode' | tee -a $LOG
fi


# Prior to beginning, are the require input files in the current dir? If not throw an error, if yes then proceed with checksum calculation and decompression steps.
if [ ! -f Undetermined_S0_L001_R1_001.fastq.gz ] || [ ! -f Undetermined_S0_L001_R2_001.fastq.gz ] || [ ! -f Undetermined_S0_L001_I1_001.fastq.gz ]; then
    echo '' | tee -a $LOG
    echo 'ERROR: Required input files could not be found.' | tee -a $LOG
    echo 'Script must be executed in the directory containing the Undertermined read and index files in their original compressed (*.fastq.gz) form.' | tee -a $LOG
    echo '' | tee -a $LOG
    compress
    exit 1
elif [ -s Undetermined_S0_L001_R1_001.fastq.gz ] && [ -s Undetermined_S0_L001_R2_001.fastq.gz ] && [ -s Undetermined_S0_L001_I1_001.fastq.gz ]; then
    MD5R1=`md5 Undetermined_S0_L001_R1_001.fastq.gz`
    MD5R2=`md5 Undetermined_S0_L001_R2_001.fastq.gz`
    MD5INDEX=`md5 Undetermined_S0_L001_I1_001.fastq.gz`
    echo '' | tee -a $LOG
    echo "Using the following files as input:" | tee -a $LOG
    echo $MD5R1 | tee -a $LOG
    echo $MD5R2 | tee -a $LOG
    echo $MD5INDEX | tee -a $LOG
    if $SMP; then
        parallel gunzip ::: Undetermined_S0_L001_R1_001.fastq.gz Undetermined_S0_L001_R2_001.fastq.gz Undetermined_S0_L001_I1_001.fastq.gz
    else
        gunzip Undetermined_S0_L001_R1_001.fastq.gz Undetermined_S0_L001_R2_001.fastq.gz Undetermined_S0_L001_I1_001.fastq.gz
    fi
    MD5R1FQ=`md5 Undetermined_S0_L001_R1_001.fastq`
    MD5R2FQ=`md5 Undetermined_S0_L001_R2_001.fastq`
    MD5INDEXFQ=`md5 Undetermined_S0_L001_I1_001.fastq`
    echo '' | tee -a $LOG
    echo "The md5 values of the uncompressed files are as follows:" | tee -a $LOG
    echo $MD5R1FQ | tee -a $LOG
    echo $MD5R2FQ | tee -a $LOG
    echo $MD5INDEXFQ | tee -a $LOG
else # Something really weird has happened if we get to this so ABORT!
    echo '' | tee -a $LOG
    echo 'ERROR: Something unknown happened, aborting script.' | tee -a $LOG
    echo 'Check to make sure the Undetermined read files are present and have non-zero file sizes before continuing.' | tee -a $LOG
    echo '' | tee -a $LOG
    compress
    exit 1
fi

# Merge Read 1 and Read 2
if [ ! -s Merged_Reads.fastq.gz ] && [ -s Undetermined_S0_L001_R1_001.fastq ] && [ -s Undetermined_S0_L001_R2_001.fastq ]; then
    echo '' | tee -a $LOG
    date +%Y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Step 1: Merging the paired reads into single contigs" | tee -a $LOG
    echo ''
    SeqPrep -f Undetermined_S0_L001_R1_001.fastq -r Undetermined_S0_L001_R2_001.fastq -1 t1 -2 t2 -L 240 -q 15 -y z -s Merged_Reads.fastq.gz
    echo '' | tee -a $LOG
    echo "Merging operation completed:" | tee -a $LOG
    gunzip Merged_reads.fastq.gz
    touch Merging.complete
fi

# Cleanup 1
if [ -s Merged_Reads.fastq ] && [ -f Merging.complete ]; then
    echo '' | tee -a $LOG
    rm t1 t2
    compress "*R1_001.fastq *R2_001.fastq"
else
    if [ ! -f phiX_removal.complete ]; then
        echo 'Read merging failed.' | tee -a $LOG
        compress
        exit 1
    fi
fi

# Use bowtie2 to map reads to phiX reference, using 4 processors
if [ ! -s phiX.sam ] && [ -s Merged_Reads.fastq ] && [ ! -f phiX_removal.complete ]; then
    date +%Y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Step 2: Identifying phiX contamination." | tee -a $LOG
    echo ''
    bowtie2 -x $PHIX -U Merged_reads.fastq -S phiX.sam -p 4
fi

# Process phiX.sam output to get unmapped reads
if [ -s phiX.sam ] && [ ! -f phiX_removal.complete ]; then
    echo ''
    samtools view -f4 -S phiX.sam | cut -f 1,1 >good.txt
else
    if [ ! -f phiX_removal.complete ]; then
        echo '' | tee -a $LOG
        echo 'Identification of phiX reads failed using bowtie.' | tee -a $LOG
        compress
        exit 1
    fi
fi

# Filter bad reads out of input file
if [ -f good.txt ]; then
    echo '' | tee -a $LOG
    date +%Y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Step 3: Filtering phiX contamination from merged reads and index reads." | tee -a $LOG
    source /macqiime/configs/bash_profile.txt
    filter_fasta.py -f Merged_reads.fastq -o Good_Reads.fastq -s good.txt
    touch phiX_removal.complete
fi

# Cleanup 2
if [ -s Good_Reads.fastq ] && [ -f phiX_removal.complete ]; then
    rm phiX.sam
    rm good.txt
    gzip Merged_reads.fastq
else
    echo 'Read filtering failed.' | tee -a $LOG
    compress
    exit 1
fi

# Define the time-stamped final output files
GOODREADS=Good_Reads_filtered_$TM.fastq
GOODINDEX=Good_Index_filtered_$TM.fastq

# Perform length filtering with standard V4 cutoff values
if [ -s Good_Reads.fastq ] && [ ! -s $GOODREADS ]; then
    echo '' | tee -a $LOG
    date +%Y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Step 4: Filtering reads with min length 245bp and max length 260bp." | tee -a $LOG
    Length_Filter.py Good_Reads.fastq $GOODREADS 245 260
    if [ -s $GOODREADS ]; then
        touch Length_filtering.complete
    fi
fi

# Filter Index file to only contain reads in Good_Reads_filtered file
if [ -s $GOODREADS ] && [ -f Length_filtering.complete ] && [ ! -s $GOODINDEX ]; then
    echo '' | tee -a $LOG
    date +%Y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Step 5: Filtering Index fastq files to remove sequences not found in Good_Reads_filtered.fastq." | tee -a $LOG 
    echo '' | tee -a $LOG
    grep $PATTERN $GOODREADS |tr -d '@' |cut -d\  -f1 >keep.txt
    source /macqiime/configs/bash_profile.txt
    filter_fasta.py -f Undetermined_S0_L001_I1_001.fastq -o $GOODINDEX -s keep.txt
    echo "Displaying number of reads in original and filtered files." | tee -a $LOG
    COUNT=`grep -c $PATTERN Undetermined_S0_L001_I1_001.fastq`
    echo "No. reads in initial index file: $COUNT " | tee -a $LOG
    COUNT=`grep -c $PATTERN $GOODREADS`
    echo "No. reads in Good_Reads_filtered: $COUNT "  | tee -a $LOG
    COUNT=`grep -c $PATTERN $GOODINDEX`
    echo "No. reads in Good_Index_filtered: $COUNT "| tee -a $LOG
else
    echo 'Length filtering failed' | tee -a $LOG
    compress
    exit 1
fi

if [ -s $GOODREADS ] && [ -s $GOODINDEX ]; then
    rm *.complete keep.txt
    compress
    mkdir V4_intermediates_$TM
    mv Good_Reads.fastq.gz Merged_reads.fastq.gz V4_intermediates_$TM/
    echo '' | tee -a $LOG
    MD5R1N=`md5 Undetermined_S0_L001_R1_001.fastq.gz`
    MD5R2N=`md5 Undetermined_S0_L001_R2_001.fastq.gz`
    MD5INDEXN=`md5 Undetermined_S0_L001_I1_001.fastq.gz`
    date +%y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "The md5 values of the Undetermined files are now:" | tee -a $LOG
    echo $MD5R1N | tee -a $LOG
    echo $MD5R2N | tee -a $LOG
    echo $MD5INDEXN | tee -a $LOG
    echo '' | tee -a $LOG
    date +%y-%m-%d_%H:%M:%S | tee -a $LOG
    echo "Pre-processing phase completed successfully!" | tee -a $LOG
    touch Pre-Processing.complete
    echo '' | tee -a $LOG
    echo ''
else
    echo 'Failed to harmonize Index and Read files' | tee -a $LOG
    compress
fi

